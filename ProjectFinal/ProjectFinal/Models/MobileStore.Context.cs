//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectFinal.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MobileStoreEntities : DbContext
    {
        public MobileStoreEntities()
            : base("name=MobileStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Feeback> Feebacks { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<Slider> Sliders { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<Business> Businesses { get; set; }
        public virtual DbSet<GrandPermission> GrandPermissions { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_DeleteCategory(Nullable<int> id, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteCategory", idParameter, error);
        }
    
        public virtual int usp_DeleteCustomer(Nullable<int> id, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteCustomer", idParameter, error);
        }
    
        public virtual int usp_DeleteProducts(Nullable<int> id, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteProducts", idParameter, error);
        }
    
        public virtual int usp_DeleteProvider(Nullable<int> id, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteProvider", idParameter, error);
        }
    
        public virtual int usp_DeleteUserInfo(Nullable<int> id, ObjectParameter error)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteUserInfo", idParameter, error);
        }
    
        public virtual ObjectResult<usp_GetCategory_Result> usp_GetCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCategory_Result>("usp_GetCategory");
        }
    
        public virtual ObjectResult<usp_GetCustomer_Result> usp_GetCustomer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCustomer_Result>("usp_GetCustomer");
        }
    
        public virtual ObjectResult<usp_GetProducts_Result> usp_GetProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProducts_Result>("usp_GetProducts");
        }
    
        public virtual ObjectResult<usp_GetProvider_Result> usp_GetProvider()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProvider_Result>("usp_GetProvider");
        }
    
        public virtual ObjectResult<usp_GetUserInfo_Result> usp_GetUserInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserInfo_Result>("usp_GetUserInfo");
        }
    
        public virtual int usp_InsertCategory(string categoryName, Nullable<int> parentId, string metaLink, Nullable<int> displayNo, string iconImg, string featureImg, string description, Nullable<int> showHome, Nullable<int> status, ObjectParameter error)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var metaLinkParameter = metaLink != null ?
                new ObjectParameter("MetaLink", metaLink) :
                new ObjectParameter("MetaLink", typeof(string));
    
            var displayNoParameter = displayNo.HasValue ?
                new ObjectParameter("DisplayNo", displayNo) :
                new ObjectParameter("DisplayNo", typeof(int));
    
            var iconImgParameter = iconImg != null ?
                new ObjectParameter("IconImg", iconImg) :
                new ObjectParameter("IconImg", typeof(string));
    
            var featureImgParameter = featureImg != null ?
                new ObjectParameter("FeatureImg", featureImg) :
                new ObjectParameter("FeatureImg", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var showHomeParameter = showHome.HasValue ?
                new ObjectParameter("ShowHome", showHome) :
                new ObjectParameter("ShowHome", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCategory", categoryNameParameter, parentIdParameter, metaLinkParameter, displayNoParameter, iconImgParameter, featureImgParameter, descriptionParameter, showHomeParameter, statusParameter, error);
        }
    
        public virtual int usp_InsertCustomer(string fullName, string passWord, string address, string phone, string email, string avatar, Nullable<double> balance, Nullable<System.DateTime> createDate, string codeConfirm, Nullable<byte> status, ObjectParameter returnCode)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var codeConfirmParameter = codeConfirm != null ?
                new ObjectParameter("CodeConfirm", codeConfirm) :
                new ObjectParameter("CodeConfirm", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCustomer", fullNameParameter, passWordParameter, addressParameter, phoneParameter, emailParameter, avatarParameter, balanceParameter, createDateParameter, codeConfirmParameter, statusParameter, returnCode);
        }
    
        public virtual int usp_InsertProducts(string productName, string iconImg, string screen, string battery, string cPU, string ram, string camera, string color, string osystem, string description, Nullable<int> discount, Nullable<double> priceIn, Nullable<double> priceOut, Nullable<int> categoryId, Nullable<int> providerId, Nullable<int> quantity, Nullable<int> coutView, Nullable<int> coutBuy, Nullable<System.DateTime> createDate, Nullable<byte> status, Nullable<int> userId, ObjectParameter returnCode)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var iconImgParameter = iconImg != null ?
                new ObjectParameter("IconImg", iconImg) :
                new ObjectParameter("IconImg", typeof(string));
    
            var screenParameter = screen != null ?
                new ObjectParameter("Screen", screen) :
                new ObjectParameter("Screen", typeof(string));
    
            var batteryParameter = battery != null ?
                new ObjectParameter("Battery", battery) :
                new ObjectParameter("Battery", typeof(string));
    
            var cPUParameter = cPU != null ?
                new ObjectParameter("CPU", cPU) :
                new ObjectParameter("CPU", typeof(string));
    
            var ramParameter = ram != null ?
                new ObjectParameter("Ram", ram) :
                new ObjectParameter("Ram", typeof(string));
    
            var cameraParameter = camera != null ?
                new ObjectParameter("Camera", camera) :
                new ObjectParameter("Camera", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var osystemParameter = osystem != null ?
                new ObjectParameter("Osystem", osystem) :
                new ObjectParameter("Osystem", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(int));
    
            var priceInParameter = priceIn.HasValue ?
                new ObjectParameter("PriceIn", priceIn) :
                new ObjectParameter("PriceIn", typeof(double));
    
            var priceOutParameter = priceOut.HasValue ?
                new ObjectParameter("PriceOut", priceOut) :
                new ObjectParameter("PriceOut", typeof(double));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var providerIdParameter = providerId.HasValue ?
                new ObjectParameter("ProviderId", providerId) :
                new ObjectParameter("ProviderId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var coutViewParameter = coutView.HasValue ?
                new ObjectParameter("CoutView", coutView) :
                new ObjectParameter("CoutView", typeof(int));
    
            var coutBuyParameter = coutBuy.HasValue ?
                new ObjectParameter("CoutBuy", coutBuy) :
                new ObjectParameter("CoutBuy", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertProducts", productNameParameter, iconImgParameter, screenParameter, batteryParameter, cPUParameter, ramParameter, cameraParameter, colorParameter, osystemParameter, descriptionParameter, discountParameter, priceInParameter, priceOutParameter, categoryIdParameter, providerIdParameter, quantityParameter, coutViewParameter, coutBuyParameter, createDateParameter, statusParameter, userIdParameter, returnCode);
        }
    
        public virtual int usp_InsertProvider(string providerName, string iconImg, string description, Nullable<byte> status, ObjectParameter returnCode)
        {
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var iconImgParameter = iconImg != null ?
                new ObjectParameter("IconImg", iconImg) :
                new ObjectParameter("IconImg", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertProvider", providerNameParameter, iconImgParameter, descriptionParameter, statusParameter, returnCode);
        }
    
        public virtual int usp_InsertUserInfo(string userName, string fullName, string passWord, string email, string avatar, Nullable<byte> isAdmin, string codeConfirm, Nullable<byte> allower, Nullable<System.DateTime> createDate, Nullable<byte> status, ObjectParameter error)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(byte));
    
            var codeConfirmParameter = codeConfirm != null ?
                new ObjectParameter("CodeConfirm", codeConfirm) :
                new ObjectParameter("CodeConfirm", typeof(string));
    
            var allowerParameter = allower.HasValue ?
                new ObjectParameter("Allower", allower) :
                new ObjectParameter("Allower", typeof(byte));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertUserInfo", userNameParameter, fullNameParameter, passWordParameter, emailParameter, avatarParameter, isAdminParameter, codeConfirmParameter, allowerParameter, createDateParameter, statusParameter, error);
        }
    
        public virtual ObjectResult<usp_TopProvider_Result> usp_TopProvider()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TopProvider_Result>("usp_TopProvider");
        }
    
        public virtual int usp_UpdateCategory(Nullable<int> categoryId, string categoryName, Nullable<int> parentId, string metaLink, Nullable<int> displayNo, string iconImg, string featureImg, string description, Nullable<int> showHome, Nullable<int> status, ObjectParameter error)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var metaLinkParameter = metaLink != null ?
                new ObjectParameter("MetaLink", metaLink) :
                new ObjectParameter("MetaLink", typeof(string));
    
            var displayNoParameter = displayNo.HasValue ?
                new ObjectParameter("DisplayNo", displayNo) :
                new ObjectParameter("DisplayNo", typeof(int));
    
            var iconImgParameter = iconImg != null ?
                new ObjectParameter("IconImg", iconImg) :
                new ObjectParameter("IconImg", typeof(string));
    
            var featureImgParameter = featureImg != null ?
                new ObjectParameter("FeatureImg", featureImg) :
                new ObjectParameter("FeatureImg", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var showHomeParameter = showHome.HasValue ?
                new ObjectParameter("ShowHome", showHome) :
                new ObjectParameter("ShowHome", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCategory", categoryIdParameter, categoryNameParameter, parentIdParameter, metaLinkParameter, displayNoParameter, iconImgParameter, featureImgParameter, descriptionParameter, showHomeParameter, statusParameter, error);
        }
    
        public virtual int usp_UpdateCustomer(Nullable<int> customerId, string fullName, string passWord, string address, string phone, string email, string avatar, Nullable<double> balance, Nullable<System.DateTime> createDate, string codeConfirm, Nullable<byte> status, ObjectParameter returnCode)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var codeConfirmParameter = codeConfirm != null ?
                new ObjectParameter("CodeConfirm", codeConfirm) :
                new ObjectParameter("CodeConfirm", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCustomer", customerIdParameter, fullNameParameter, passWordParameter, addressParameter, phoneParameter, emailParameter, avatarParameter, balanceParameter, createDateParameter, codeConfirmParameter, statusParameter, returnCode);
        }
    
        public virtual int usp_UpdateProducts(Nullable<int> productId, string productName, string iconImg, string screen, string battery, string cPU, string ram, string camera, string color, string osystem, string description, Nullable<int> discount, Nullable<double> priceIn, Nullable<double> priceOut, Nullable<int> categoryId, Nullable<int> providerId, Nullable<int> quantity, Nullable<int> coutView, Nullable<int> coutBuy, Nullable<System.DateTime> createDate, Nullable<byte> status, Nullable<int> userId, ObjectParameter returnCode)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var iconImgParameter = iconImg != null ?
                new ObjectParameter("IconImg", iconImg) :
                new ObjectParameter("IconImg", typeof(string));
    
            var screenParameter = screen != null ?
                new ObjectParameter("Screen", screen) :
                new ObjectParameter("Screen", typeof(string));
    
            var batteryParameter = battery != null ?
                new ObjectParameter("Battery", battery) :
                new ObjectParameter("Battery", typeof(string));
    
            var cPUParameter = cPU != null ?
                new ObjectParameter("CPU", cPU) :
                new ObjectParameter("CPU", typeof(string));
    
            var ramParameter = ram != null ?
                new ObjectParameter("Ram", ram) :
                new ObjectParameter("Ram", typeof(string));
    
            var cameraParameter = camera != null ?
                new ObjectParameter("Camera", camera) :
                new ObjectParameter("Camera", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var osystemParameter = osystem != null ?
                new ObjectParameter("Osystem", osystem) :
                new ObjectParameter("Osystem", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(int));
    
            var priceInParameter = priceIn.HasValue ?
                new ObjectParameter("PriceIn", priceIn) :
                new ObjectParameter("PriceIn", typeof(double));
    
            var priceOutParameter = priceOut.HasValue ?
                new ObjectParameter("PriceOut", priceOut) :
                new ObjectParameter("PriceOut", typeof(double));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var providerIdParameter = providerId.HasValue ?
                new ObjectParameter("ProviderId", providerId) :
                new ObjectParameter("ProviderId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var coutViewParameter = coutView.HasValue ?
                new ObjectParameter("CoutView", coutView) :
                new ObjectParameter("CoutView", typeof(int));
    
            var coutBuyParameter = coutBuy.HasValue ?
                new ObjectParameter("CoutBuy", coutBuy) :
                new ObjectParameter("CoutBuy", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateProducts", productIdParameter, productNameParameter, iconImgParameter, screenParameter, batteryParameter, cPUParameter, ramParameter, cameraParameter, colorParameter, osystemParameter, descriptionParameter, discountParameter, priceInParameter, priceOutParameter, categoryIdParameter, providerIdParameter, quantityParameter, coutViewParameter, coutBuyParameter, createDateParameter, statusParameter, userIdParameter, returnCode);
        }
    
        public virtual int usp_UpdateProvider(Nullable<int> providerId, string providerName, string iconImg, string description, Nullable<byte> status, ObjectParameter returnCode)
        {
            var providerIdParameter = providerId.HasValue ?
                new ObjectParameter("ProviderId", providerId) :
                new ObjectParameter("ProviderId", typeof(int));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var iconImgParameter = iconImg != null ?
                new ObjectParameter("IconImg", iconImg) :
                new ObjectParameter("IconImg", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateProvider", providerIdParameter, providerNameParameter, iconImgParameter, descriptionParameter, statusParameter, returnCode);
        }
    
        public virtual int usp_UpdateUserInfo(Nullable<int> userId, string userName, string fullName, string passWord, string email, string avatar, Nullable<byte> isAdmin, string codeConfirm, Nullable<byte> allower, Nullable<System.DateTime> createDate, Nullable<byte> status, ObjectParameter error)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(byte));
    
            var codeConfirmParameter = codeConfirm != null ?
                new ObjectParameter("CodeConfirm", codeConfirm) :
                new ObjectParameter("CodeConfirm", typeof(string));
    
            var allowerParameter = allower.HasValue ?
                new ObjectParameter("Allower", allower) :
                new ObjectParameter("Allower", typeof(byte));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserInfo", userIdParameter, userNameParameter, fullNameParameter, passWordParameter, emailParameter, avatarParameter, isAdminParameter, codeConfirmParameter, allowerParameter, createDateParameter, statusParameter, error);
        }
    }
}
